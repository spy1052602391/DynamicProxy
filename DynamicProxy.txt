

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;

interface Learn{
    public void learning();
}
class LearnWay implements Learn {
    @Override
    public void learning() {
        System.out.println("敲代码学习!");
    }
}

interface Relax{
    public void relaxing(int num);
}
class RelaxWay implements Relax{
    @Override
    public void relaxing(int num) {
        System.out.println("看"+num+"小时电影放松!");
    }
}

class ProxyFactory{
    private Object obj;
    public ProxyFactory(Object obj){
        this.obj = obj;
    }
    public Object getProxyInstance(){
        //要通过Proxy.newProxyInstance方法获取委托类的实例化对象的时候，必须有三个参数
        //1.需要当前目标对象使用的类加载器。
        ClassLoader classLoader = obj.getClass().getClassLoader();
        //2.目标对象实现的接口的类型。注意：接口可能是多个。
        Class[] interfaces = obj.getClass().getInterfaces();
        //3.事件处理,执行目标对象的方法时,会触发事件处理器的方法,会把当前执行目标对象的方法作为参数传入
        InvocationHandler h = new InvocationHandler() {
            @Override
            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                System.out.println("打开电脑!");
                Object returnValue = method.invoke(obj,args);
                System.out.println("关闭电脑!");
                return returnValue;
            }
        };
        return Proxy.newProxyInstance(classLoader,interfaces,h);
    }
}

public class Main {
    public static void main(String[] args) {
        Learn learn = new LearnWay();
        Learn proxy = (Learn) new ProxyFactory(learn).getProxyInstance();
        proxy.learning();
    }
}
